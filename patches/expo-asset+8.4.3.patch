diff --git a/node_modules/expo-asset/build/Asset.fx.js b/node_modules/expo-asset/build/Asset.fx.js
index 9422874..70a3704 100644
--- a/node_modules/expo-asset/build/Asset.fx.js
+++ b/node_modules/expo-asset/build/Asset.fx.js
@@ -1,14 +1,23 @@
 import { Asset } from './Asset';
 import { IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';
 import { setCustomSourceTransformer } from './resolveAssetSource';
+
+// NOTE(cedric): With the hybrid approach of Snack Runtime in dev-client apps, we have to do more
+// We always have to enable the custom transformer, but fallback to the default assets when it can't resolve
+// This flow supports both plain React Native and Snack assets at the same time
+
 // Override React Native's asset resolution for `Image` components in contexts where it matters
-if (IS_ENV_WITH_UPDATES_ENABLED) {
+// if (IS_ENV_WITH_UPDATES_ENABLED) {
     setCustomSourceTransformer((resolver) => {
         try {
             // Bundler is using the hashAssetFiles plugin if and only if the fileHashes property exists
             if (resolver.asset.fileHashes) {
                 const asset = Asset.fromMetadata(resolver.asset);
-                return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
+                if (asset) {
+                    return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
+                } else {
+                    return resolver.defaultAsset();
+                }
             }
             else {
                 return resolver.defaultAsset();
@@ -18,5 +27,5 @@ if (IS_ENV_WITH_UPDATES_ENABLED) {
             return resolver.defaultAsset();
         }
     });
-}
+// }
 //# sourceMappingURL=Asset.fx.js.map
diff --git a/node_modules/expo-asset/src/Asset.fx.ts b/node_modules/expo-asset/src/Asset.fx.ts
index d274584..a3b58b9 100644
--- a/node_modules/expo-asset/src/Asset.fx.ts
+++ b/node_modules/expo-asset/src/Asset.fx.ts
@@ -2,14 +2,22 @@ import { Asset } from './Asset';
 import { IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';
 import { setCustomSourceTransformer } from './resolveAssetSource';
 
+// NOTE(cedric): With the hybrid approach of Snack Runtime in dev-client apps, we have to do more
+// We always have to enable the custom transformer, but fallback to the default assets when it can't resolve
+// This flow supports both plain React Native and Snack assets at the same time
+
 // Override React Native's asset resolution for `Image` components in contexts where it matters
-if (IS_ENV_WITH_UPDATES_ENABLED) {
+// if (IS_ENV_WITH_UPDATES_ENABLED) {
   setCustomSourceTransformer((resolver) => {
     try {
       // Bundler is using the hashAssetFiles plugin if and only if the fileHashes property exists
       if (resolver.asset.fileHashes) {
         const asset = Asset.fromMetadata(resolver.asset);
-        return resolver.fromSource(asset.downloaded ? asset.localUri! : asset.uri);
+        if (asset) {
+          return resolver.fromSource(asset.downloaded ? asset.localUri! : asset.uri);
+        } else {
+          return resolver.defaultAsset();
+        }
       } else {
         return resolver.defaultAsset();
       }
@@ -17,4 +25,4 @@ if (IS_ENV_WITH_UPDATES_ENABLED) {
       return resolver.defaultAsset();
     }
   });
-}
+// }
